<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>初探Android的AIDL</title>
      <link href="/2024/11/28/chu-tan-android-de-aidl/"/>
      <url>/2024/11/28/chu-tan-android-de-aidl/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初识Android的AIDL</title>
      <link href="/2024/11/27/chu-shi-android-de-aidl/"/>
      <url>/2024/11/27/chu-shi-android-de-aidl/</url>
      
        <content type="html"><![CDATA[<p>写这一篇是因为网上搜索到的AIDL都讲的比较复杂，涉及到了很多原理。但是我目前想以了解和使用为主，因此作出简短介绍。后面了解更深入的AIDL知识后会进一步更新</p><h1 id="什么是AIDL"><a href="#什么是AIDL" class="headerlink" title="什么是AIDL"></a>什么是AIDL</h1><p>AIDL全称为Android Interface Definition Language，是Android的一种<strong>跨进程通信机制</strong>。AIDL允许开发者定义接口，通过该接口实现IPC（跨进程通信）。这种机制是基于Binder驱动实现的。</p><h1 id="AIDL的原理"><a href="#AIDL的原理" class="headerlink" title="AIDL的原理"></a>AIDL的原理</h1><ol><li><p>开发者定义接口：</p><p>AIDL 允许开发者定义接口，这些接口通常包含服务端提供的方法。接口定义是通过一个 <code>.aidl</code> 文件来实现的。该文件描述了跨进程调用的方法和数据类型。</p></li><li><p>生成代码： </p><p>Android 编译系统会将 AIDL 文件转换为 Java 代码，生成服务端和客户端的绑定类。服务端通过这些类来实现接口，而客户端通过这些类来调用服务端提供的接口方法。</p></li><li><p><strong>跨进程调用</strong>： </p><p>客户端应用和服务端应用通常运行在不同的进程中。通过 AIDL 定义的接口，客户端可以调用服务端的方法</p></li></ol><h1 id="AIDL的使用"><a href="#AIDL的使用" class="headerlink" title="AIDL的使用"></a>AIDL的使用</h1><p><strong>定义 AIDL 接口</strong>： 创建一个 <code>.aidl</code> 文件，定义要进行跨进程通信的接口及其方法。例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java复制代码// IMyService.aidl</span><br><span class="line">package com.example.aidl;</span><br><span class="line"></span><br><span class="line">interface IMyService {</span><br><span class="line">    int add(int a, int b);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>实现 AIDL 接口</strong>： 在服务端应用中实现这个接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> <span class="keyword">extends</span> <span class="title class_">Service</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IMyService.<span class="type">Stub</span> <span class="variable">mBinder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IMyService</span>.Stub() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> {</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IBinder <span class="title function_">onBind</span><span class="params">(Intent intent)</span> {</span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>绑定服务并调用接口</strong>： 客户端应用通过绑定服务和获取到 AIDL 接口的代理对象，来调用服务端提供的方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ClientActivity.java</span></span><br><span class="line">IMyService mService;</span><br><span class="line"><span class="type">ServiceConnection</span> <span class="variable">mConnection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceConnection</span>() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> {</span><br><span class="line">        mService = IMyService.Stub.asInterface(service);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mService.add(<span class="number">1</span>, <span class="number">2</span>);  <span class="comment">// 调用远程服务的方法</span></span><br><span class="line">            Log.d(<span class="string">"Client"</span>, <span class="string">"Result: "</span> + result);</span><br><span class="line">        } <span class="keyword">catch</span> (RemoteException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceDisconnected</span><span class="params">(ComponentName name)</span> {</span><br><span class="line">        mService = <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">intent.setComponent(<span class="keyword">new</span> <span class="title class_">ComponentName</span>(<span class="string">"com.example.myservice"</span>, <span class="string">"com.example.myservice.MyService"</span>));</span><br><span class="line">bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</span><br></pre></td></tr></tbody></table></figure><h1 id="AIDL在Android-OS源码中的使用"><a href="#AIDL在Android-OS源码中的使用" class="headerlink" title="AIDL在Android OS源码中的使用"></a>AIDL在Android OS源码中的使用</h1><p>cs.android中有aosp的源码</p><p>AIDL的使用在manager及其对应的service中非常常见</p><p>比如AudioManager中，我们可以看到adjustStreamVolume API的内部实现其实调用的是service.adjustStreamVolumeWithAttribution;</p><p>这就类似于上面所讲的客户端，我们可以去找AudioService以及IAudioService.aidl文件</p><p><img src="C:\Users\lishuang\AppData\Roaming\Typora\typora-user-images\image-20241127200347437.png" alt="image-20241127200347437"></p><p><img src="C:\Users\lishuang\AppData\Roaming\Typora\typora-user-images\image-20241127200512723.png" alt="image-20241127200512723"></p><p>果然，AudioService中有：</p><p><img src="C:\Users\lishuang\AppData\Roaming\Typora\typora-user-images\image-20241127201540930.png" alt="image-20241127201540930"></p><p>对应的AIDL文件中有：</p><p><img src="C:\Users\lishuang\AppData\Roaming\Typora\typora-user-images\image-20241127201714596.png" alt="image-20241127201714596"></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>【1】ChatGPT</p><p>【2】<a href="https://cs.android.com/">https://cs.android.com/</a></p><p>【3】<a href="https://juejin.cn/post/7123129439898042376">https://juejin.cn/post/7123129439898042376</a></p>]]></content>
      
      
      <categories>
          
          <category> IPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> IPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/07/20/hello-world/"/>
      <url>/2024/07/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
